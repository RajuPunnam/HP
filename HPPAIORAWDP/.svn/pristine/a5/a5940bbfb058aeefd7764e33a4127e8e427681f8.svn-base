package com.techouts.service;

import java.io.File;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import javax.annotation.Resource;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.techouts.dao.FtpDao;
import com.techouts.dao.PpbPcDao;
import com.techouts.pojo.FileUploadInfo;
import com.techouts.pojo.PpbPcPojo;
import com.techouts.pojo.ReportSummary;

@Service
public class PpbPcService {
	private final static Logger LOGGER = Logger.getLogger(PpbPcService.class);
	@Autowired
	private PpbPcDao ppbDao;
	@Autowired
	private FtpDao ftpDao;
	@Autowired
	private FtpMail ftpMail;
	@Resource(name = "myProps")
	private Properties properties;
	SimpleDateFormat requiredDateFormat = new SimpleDateFormat("MM-dd-yyyy");
	SimpleDateFormat existedFormat = new SimpleDateFormat("dd/MM/yyyy");
	private final String CONSUMPTION_PC_HEADER[] = { "Código do Item", "Description", "Alm",
			"DataTrans", "Tipo Transa鈬o", "No OP", "SKU", "Total da OP",
			"Qtd Baixa/Receb", "Saldo da OP", "Hr Trans", "Hr +4 hrs",
			"Retrab", "Login code", "Est apÃ³s Trans" };
	List<String> consumptionHeaderList = Arrays.asList(CONSUMPTION_PC_HEADER);

	

	public FileUploadInfo getUploadConsumptionCsvData(File inputLocation, FTPFile file) {
		CSVParser csvFileParser = null;
		boolean uploadStatus = false;
		List<PpbPcPojo> consumptionPcList = null;
		FileUploadInfo fileUploadInfo=new FileUploadInfo();
		CSVFormat csvFileFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader()
				.withDelimiter(';').withAllowMissingColumnNames(true);
		String fileDate = getFileDate(file);
		try {
			csvFileParser = new CSVParser(new FileReader(inputLocation
					+ File.separator + file.getName()), csvFileFormat);
			if (findHeaders(csvFileParser.getHeaderMap()) <=consumptionHeaderList.size()/2) {
				csvFileParser = null;
				csvFileFormat = CSVFormat.DEFAULT
						.withHeader(CONSUMPTION_PC_HEADER).withDelimiter(';')
						.withAllowMissingColumnNames(true);
				csvFileParser = new CSVParser(new FileReader(inputLocation
						+ File.separator + file.getName()), csvFileFormat);
			}
		} catch (IllegalArgumentException illegalArgumentException) {
			csvFileParser = null;
			csvFileFormat = CSVFormat.DEFAULT.withHeader(CONSUMPTION_PC_HEADER)
					.withDelimiter(';').withAllowMissingColumnNames(true);
			try {
				csvFileParser = new CSVParser(new FileReader(inputLocation
						+ File.separator + file.getName()), csvFileFormat);
			} catch (Exception exception) {
				LOGGER.error(exception.getMessage());
			}
		} catch (Exception exception) {
			LOGGER.error(exception.getMessage());
		}
		consumptionPcList = new ArrayList<PpbPcPojo>();
		try {
			List<CSVRecord> consumptioPcRecordsList = csvFileParser
					.getRecords();
			if (consumptioPcRecordsList != null
					&& consumptioPcRecordsList.size() > 0) {
				for (int i = 0; i < consumptioPcRecordsList.size(); i++) {
					CSVRecord consumptionRecord = consumptioPcRecordsList
							.get(i);
					if (!consumptionHeaderList.contains(consumptionRecord
							.get("Codigo do Item"))
							&& !consumptionHeaderList
									.contains(consumptionRecord
											.get("Description"))) {
						PpbPcPojo consumption = new PpbPcPojo();
						consumption.setFileDate(fileDate);
						
						if (consumptionRecord
								.isMapped("Codigo do Item")) {
							if (consumptionRecord
									.isSet("Codigo do Item")) {
								String item_code = consumptionRecord
										.get("Codigo do Item");
								consumption.setItem_code(item_code.trim());
							}

						}
						if (consumptionRecord
								.isMapped("Description")) {
							if (consumptionRecord
									.isSet("Description")) {
								String description = consumptionRecord
										.get("Description");
								consumption.setDescription(description.trim());
							}
						}
						if (consumptionRecord
								.isMapped("Alm")) {
							if (consumptionRecord
									.isSet("Alm")) {
								String alm = consumptionRecord
										.get("Alm");
								double ALM = 0;
								if (alm != null) {
									alm = alm.trim().replaceAll("[',',' ','.']", "");
									if (!alm.equals("")
											&& alm.trim().matches("^[0-9]*$*")) {
										ALM = Double.parseDouble(alm);
									}
								}
								consumption.setAlm(ALM);
							}
						}
						if (consumptionRecord
								.isMapped("DataTrans")) {
							if (consumptionRecord
									.isSet("DataTrans")) {
								String dataTrans = consumptionRecord
										.get("DataTrans");
								if (dataTrans != null) {
									dataTrans = dataTrans.trim().replaceAll(
											"[',',' ','.']", "");
									if (!dataTrans.equals("")
											&& dataTrans.matches("^[0-9/]*$*")) {
										consumption
												.setDataTrans(requiredDateFormat.format(existedFormat
														.parse(dataTrans)));
									} else {
										consumption.setDataTrans(dataTrans
												.trim());
									}
								}
							}
						}
						if (consumptionRecord
								.isMapped("Tipo Transa鈬o")) {
							if (consumptionRecord
									.isSet("Tipo Transa鈬o")) {
								String transactionType = consumptionRecord
										.get("Tipo Transa鈬o");
								consumption.setTransaction_type(transactionType
										.trim());
							}
						}
						
						if (consumptionRecord
								.isMapped("No OP")) {
							if (consumptionRecord
									.isSet("No OP")) {
								String IP = consumptionRecord
										.get("No OP");
								double ip = 0;
								if (IP != null) {
									IP = IP.trim().replaceAll("[',',' ','.']", "");
									if (!IP.equals("")
											&& IP.matches("^[0-9]*$*")) {
										ip = Double.parseDouble(IP);
									}

								}
								consumption.setIP(ip);
							}
						}
						if (consumptionRecord
								.isMapped("SKU")) {
							if (consumptionRecord
									.isSet("SKU")) {
								String sku = consumptionRecord
										.get("SKU");
								consumption.setSKU(sku.trim());
							}
						}
						if (consumptionRecord
								.isMapped("Total da OP")) {
							if (consumptionRecord
									.isSet("Total da OP")) {
								String total_OP = consumptionRecord
										.get("Total da OP");
								double totalOP = 0;
								if (total_OP != null)
									total_OP = total_OP.trim().replaceAll("[',',' ','.']",
											"");
								{
									if (!total_OP.equals("")
											&& total_OP.matches("^[0-9]*$*")) {
										totalOP = Double.parseDouble(total_OP);
									}
								}
								consumption.setTotal_OP(totalOP);
							}
						}

						if (consumptionRecord
								.isMapped("Qtd Baixa/Receb")) {
							if (consumptionRecord
									.isSet("Qtd Baixa/Receb")) {
								String low_Qty_Receive = consumptionRecord
										.get("Qtd Baixa/Receb");
								double lowQtyReceive = 0;
								if (low_Qty_Receive != null) {
									low_Qty_Receive = low_Qty_Receive.trim()
											.replaceAll("[',',' ','.']", "");
									if (!low_Qty_Receive.equals("")
											&& low_Qty_Receive
													.matches("^[0-9]*$*")) {
										lowQtyReceive = Double
												.parseDouble(low_Qty_Receive);
									}
								}
								consumption.setLow_Qty_Receive(lowQtyReceive);
							}
						}
						if (consumptionRecord
								.isMapped("Saldo da OP")) {
							if (consumptionRecord
									.isSet("Saldo da OP")) {
								String OP_balance = consumptionRecord
										.get("Saldo da OP");
								double opBalance = 0;
								if (OP_balance != null) {
									OP_balance = OP_balance.trim().replaceAll(
											"[',',' ','.']", "");
									if (!OP_balance.equals("")
											&& OP_balance.matches("^[0-9]*$*")) {
										opBalance = Double
												.parseDouble(OP_balance);
									}
								}
								consumption.setOP_balance(opBalance);
							}
						}
						if (consumptionRecord
								.isMapped("Hr Trans")) {
							if (consumptionRecord
									.isSet("Hr Trans")) {
								String Hr_Trans = consumptionRecord
										.get("Hr Trans");
								consumption.setHr_Trans(Hr_Trans.trim());

							}
						}
						if (consumptionRecord
								.isMapped("Hr +4 hrs")) {
							if (consumptionRecord
									.isSet("Hr +4 hrs")) {
								String Hr_4_hrs = consumptionRecord
										.get("Hr +4 hrs");
								consumption.setHr__4_hrs(Hr_4_hrs.trim());
							}

						}

						if (consumptionRecord
								.isMapped("Retrab")) {
							if (consumptionRecord
									.isSet("Retrab")) {
								String Retrab = consumptionRecord
										.get("Retrab");
								consumption.setRetrab(Retrab.trim());
							}
						}
						if (consumptionRecord
								.isMapped("Login code")) {
							if (consumptionRecord
									.isSet("Login code")) {
								String Login_code = consumptionRecord
										.get("Login code");
								consumption.setLogin_code(Login_code.trim());
							}
						}
						if (consumptionRecord
								.isMapped("Est apÃ³s Trans")) {
							if (consumptionRecord
									.isSet("Est apÃ³s Trans")) {
								String Est_after_Trans = consumptionRecord
										.get("Est apÃ³s Trans");
								double estAfterTrans = 0.0;
								if (Est_after_Trans != null) {
									if (!Est_after_Trans.equals("")
											&& Est_after_Trans
													.matches("^[0-9]*$*")) {
										estAfterTrans = Double
												.parseDouble(Est_after_Trans);
									}
								}
								consumption.setEst_after_Trans(estAfterTrans);
							}
						}
						consumptionPcList.add(consumption);
					}
				}
				if (consumptionPcList != null && consumptionPcList.size() > 0) {
					uploadStatus = ppbDao
							.getInsertConsumptionPcData(consumptionPcList);
					if (uploadStatus) {
						ReportSummary reportSummary = new ReportSummary();
						reportSummary.setCollectionName(properties
								.getProperty("consumption.pc.collectionname"));
						reportSummary.setLastUploadedFileDate(fileDate);
						ftpDao.getUpDateReportSummary(reportSummary);
					}
				}
				fileUploadInfo.setRecordsCount(consumptionPcList.size());
				fileUploadInfo.setUploadStatus(uploadStatus);
			}
		} catch (Exception exception) {
			LOGGER.info(exception.getMessage());
			try {
				ftpMail.sendMail(fileDate + " has contains duplicate headers",
						"pc consumption fileUpload Status");
			} catch (Exception exception2) {
				LOGGER.error(exception2.getMessage());
			}
		}

		return fileUploadInfo;
	}

	public int findHeaders(Map<String, Integer> headersMap) {
		int headerMatchCount = 0;

		for (Entry<String, Integer> header : headersMap.entrySet()) {
			if (consumptionHeaderList.contains(header.getKey().trim())) {
				headerMatchCount++;
			}
		}
		return headerMatchCount;
	}

	public String getFileDate(FTPFile ftpFile) {
		String file = ftpFile.getName().substring(6, 14);
		return file.substring(4, 6) + "-" + file.substring(6, 8) + "-"
				+ file.substring(0, 4);
	}

}