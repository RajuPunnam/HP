package com.techouts.controller;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.concurrent.TimeUnit;

import javax.mail.MessagingException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.techouts.dao.FtpDao;
import com.techouts.service.BomService;
import com.techouts.service.FtpMail;
import com.techouts.service.FtpService;
import com.techouts.service.MachineIpService;
import com.techouts.service.StatusService;
import com.techouts.workerthread.DoiWorkerThread;
import com.techouts.workerthread.PcOpenOrdersWorkerThread;
import com.techouts.workerthread.PcShipmentsToHpWorkerThread;
import com.techouts.workerthread.PoFromHpWorkerThread;
import com.techouts.workerthread.PpbPcWorker;

@Controller
public class DataProcessController {
	int count = 0;
	private static final Logger LOGGER = Logger
			.getLogger(DataProcessController.class);
	@Autowired
	private FtpDao ftpDao;
	@Autowired
	private DoiWorkerThread doiWorkerThread;
	@Autowired
	private PcOpenOrdersWorkerThread pcOpenOrdersWorkerThread;
	@Autowired
	private PcShipmentsToHpWorkerThread pcShipmentsWorkerThread;
	@Autowired
	private PoFromHpWorkerThread poFromHpWorkerThread;
	@Autowired
	private PpbPcWorker ppbWorker;
	@Autowired
	private StatusService statusService;
	@Autowired
	private ThreadPoolTaskExecutor threadPoolTaskExecutor;
	@Autowired
	private BomService bomService;
	@Autowired
	private FtpService ftpService;
	@Autowired
	private MachineIpService machineIpService;
	@Autowired
	private FtpMail ftpMail;

	@RequestMapping(value = "/rawdataprocess", method = RequestMethod.GET)
	public String getStartAllRawDataProcessCollections(
			HttpServletResponse response,Model model) throws InterruptedException, IOException, MessagingException {
		
	    threadPoolTaskExecutor.execute(doiWorkerThread);
		threadPoolTaskExecutor.execute(pcOpenOrdersWorkerThread);
	    threadPoolTaskExecutor.execute(pcShipmentsWorkerThread);
		threadPoolTaskExecutor.execute(poFromHpWorkerThread);
		threadPoolTaskExecutor.execute(ppbWorker);

		for (int i = 1; i <= 30; i++)
		{
			TimeUnit.MINUTES.sleep(1);
			if (doiWorkerThread.getDoiDownloadMethodCompleationStatus()) {
			
				if (pcOpenOrdersWorkerThread
						.getDoiDownloadMethodCompleationStatus()) {
					if (pcShipmentsWorkerThread
							.getDoiDownloadMethodCompleationStatus()) {
						if (poFromHpWorkerThread
								.getDoiDownloadMethodCompleationStatus()) {
							if (ppbWorker
									.getConsumptionPcDownloadMethodCompleationStatus()) {
								LOGGER.info("All Threads compleated ");
								break;
							}

						}
					}
				}
			}
		}
		
		ftpMail.sendStatusMailWithAttachment(statusService.getUploadedDataInfo());
		model.addAttribute("machineip", machineIpService.getMachineIpAddress());
		return "Paiodataprocess" ;

	}

	@RequestMapping(value = "/rawdatauploadstatus", method = RequestMethod.GET)
	public String getFileUploadStatus(Model model) {
		model.addAttribute("reportmap", ftpService.getfileUploadStatusList());
		model.addAttribute("currentdayStatus",ftpService.getCurrentDayUploadedFilesList());
		return "Reportsummary";
	}

	@RequestMapping(value = "/PaIoDataprocess", method = RequestMethod.GET)
	public ModelAndView paioDataprocess() throws UnknownHostException {

		return new ModelAndView("Paiodataprocess", "machineip", machineIpService.getMachineIpAddress());
	}
    @RequestMapping(value="/UpdateskuAvil",method=RequestMethod.GET)
    public String calculateSkuAvilabilityWithAndWithoutBom(Model model) throws UnknownHostException
    {
    	model.addAttribute("machineip", machineIpService.getMachineIpAddress());
    	return "PA";
    }
	@RequestMapping(value = "/home")
	public String getHomePage(Model model) throws UnknownHostException {
		model.addAttribute("machineip", machineIpService.getMachineIpAddress());
		return "Paiodataprocess";
	}

	@RequestMapping(value = "/loadbomfiles", method = RequestMethod.GET)
	public String loadBomFiles(Model model) throws UnknownHostException {
		model.addAttribute("machineip", machineIpService.getMachineIpAddress());
		return "Bom";
	}

	@RequestMapping(value = "/intendedbom", method = RequestMethod.GET)
	public String loadIntendedBomFiles(Model model, HttpServletRequest request) {
		bomService.processIntendebBomFile();
		model.addAttribute("reportmap", ftpService.getfileUploadStatusList());
		return "Reportsummary";
	}

	@RequestMapping(value = "/amlavCostedBom", method = RequestMethod.GET)
	public String loadamlavCostedBom(Model model) {
		bomService.getLoadAmlavCostedBomReportSummaryFiles();
		model.addAttribute("reportmap", ftpService.getfileUploadStatusList());
		return "Reportsummary";
	}

	@RequestMapping(value = "/bomavreportperiod", method = RequestMethod.GET)
	public String loadBomAvReportPeriod(Model model) {
		bomService.getLoadBomAvReportPeriodFiles();
		model.addAttribute("reportmap", ftpService.getfileUploadStatusList());
		return "Reportsummary";
	}

	@RequestMapping(value = "/bomfullreportperiod", method = RequestMethod.GET)
	public String loadBomFullReportPeriod(Model model) {
		bomService.getLoadBomFullReportPeriodFiles();
		;
		model.addAttribute("reportmap", ftpService.getfileUploadStatusList());
		return "Reportsummary";
	}

}