package com.techouts.hp.util;

import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

/**
 * OS class to find OS 
 * @author raju
 *
 */
@Component
public class OS {
	private static final Logger LOGGER=Logger.getLogger(OS.class);
	@Resource(name = "myProps")
	private Properties prop;
	private String dowloadPath = null;
	private static final String WINDOWS = "windows";
	private static final String LINUX = "linux";
	private static final String MAC = "mac";
	private static final String SOLARIS = "solaris";
	private static final String PROD_PRIVATE_IP="192.168.2.98";
	private static final String PROD_PUBLIC_IP="proc.techouts.com";
	private static String machineIp;

	enum OSTypes {
		windows, linux,mac,solaris
	}

	@PostConstruct
	public void init() 
	{
		if (findOs().equals(OSTypes.windows)) {
			dowloadPath = prop.getProperty("drive.name");
		} else if (findOs().equals(OSTypes.linux)) {
			dowloadPath = prop.getProperty("linux.os.name.drive");
		}
		LOGGER.info("os download directory "+dowloadPath);
	}
/**
 *method to find Operaing system
 * @return OSTypes
 */
	public OSTypes findOs() {
		String operSys = System.getProperty("os.name").toLowerCase();
		if (operSys.contains("win")) {
			return OSTypes.windows;
		} else if (operSys.contains("nix") || operSys.contains("nux")
				|| operSys.contains("aix")) {

			return OSTypes.linux;
		} else if (operSys.contains("mac")) {

			return OSTypes.mac;
		} else if (operSys.contains("sunos")) {

			return OSTypes.solaris;
		}
		return null;
	}

	public String getDownloadLocation() {
		return dowloadPath;
	}
	@PostConstruct
	private void getMachineIpAddress() throws UnknownHostException 
	{
		String inetAddress = Inet4Address.getLocalHost().getHostAddress();
		if (inetAddress.equals(PROD_PRIVATE_IP)) 
		{
			machineIp= PROD_PUBLIC_IP;
		} else {
			machineIp= inetAddress;
		}
	}
	public String getIP()
	{
		return machineIp;
	}
}
