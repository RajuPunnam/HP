package com.techouts.hp.service;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.techouts.hp.dao.CsvExcelDao;
import com.techouts.hp.dto.DataStatus;
import com.techouts.hp.dto.PcShipmentsToHp;
import com.techouts.hp.pojo.FileSupport;

@Service
public class PcShipmentsToHpService {
	private final static Logger LOGGER = Logger
			.getLogger(PcShipmentsToHpService.class);
	@Autowired 
	private CsvExcelDao csvExcelDao;
	private static final String HPM1="HPM1-";
	private static final String FAMILY="Family";
	private static final String DATE="Date";
	private static final String SKU="SKU";
	private static final String PL="PL";
	private static final String PO="PO";
	private static final String SHIPPED="Shipped";
	private static final String NF="NF";
	private static final String PALLET="Pallet";
	private static final String PO_QTY="PO Qty";
	private static final String CUSTOMER="Customer";
	private static final String EMBARQUE="Embarque";

	private static final SimpleDateFormat REQUIRED_DATE_FORMAT = new SimpleDateFormat("MM/dd/yyyy");
	private static final SimpleDateFormat EXISTED_DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy");
	private static final SimpleDateFormat INVOICE_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

	private static String INVOICES_HEADER[] = { "HPM1-", "Family", "Date", "SKU", "PL",
			"PO", "Shipped", "NF", "Pallet", "PO Qty", "Customer", "Embarque" };
	private static final List<String> INVOICEHEADER_LIST = Arrays.asList(INVOICES_HEADER);
	public boolean readDataFromFile(File inputLocation,FileSupport fileSupport) 
	{
		DataStatus dataStatus=new DataStatus();
		CSVParser csvFileParser = null;
		boolean downloadStatus = false;
		String fileDate = getShipmentFileDate(fileSupport.getFtpFile());
		List<PcShipmentsToHp> shipmentsList = null;
		CSVFormat csvFileFormat = CSVFormat.DEFAULT.withFirstRecordAsHeader()
				.withDelimiter(';').withAllowMissingColumnNames();
		try {
			csvFileParser = new CSVParser(new FileReader(inputLocation
					+ File.separator + fileSupport.getFtpFile().getName()), csvFileFormat);
			if (!findHeader(csvFileParser.getHeaderMap())) 
			{
				csvFileFormat = null;
				csvFileFormat = CSVFormat.DEFAULT.withHeader(INVOICES_HEADER)
						.withDelimiter(';').withAllowMissingColumnNames();
				csvFileParser = new CSVParser(new FileReader(inputLocation
						+ File.separator + fileSupport.getFtpFile().getName()), csvFileFormat);
			}
		} catch (IllegalArgumentException illegalArgumentException) 
		{
			csvFileFormat = null;
			try {
				csvFileFormat = CSVFormat.DEFAULT.withHeader(INVOICES_HEADER)
						.withDelimiter(';').withAllowMissingColumnNames();
				csvFileParser = new CSVParser(new FileReader(inputLocation
						+ File.separator + fileSupport.getFtpFile().getName()), csvFileFormat);
			} catch (Exception exception) {
				LOGGER.error(exception.getMessage());
			}
		} catch (FileNotFoundException fileNotFoundException) 
		{
			LOGGER.error(fileNotFoundException.getMessage());
		} catch (Exception exception) {
			LOGGER.error(exception.getMessage());
		}
		try {
			List<CSVRecord> csvRecordsList = csvFileParser.getRecords();
			if (csvRecordsList != null && csvRecordsList.size() > 0) {
				shipmentsList = new ArrayList<PcShipmentsToHp>();
				for (int i = 0; i < csvRecordsList.size(); i++) 
				{
					CSVRecord shipmentsRecord = (CSVRecord) csvRecordsList
							.get(i);
					if (!INVOICEHEADER_LIST.contains(shipmentsRecord.get(HPM1))) 
					{
						PcShipmentsToHp shipmentsToHpDto = new PcShipmentsToHp();
						shipmentsToHpDto.setFileName(fileSupport.getFtpFile().getName());
						shipmentsToHpDto.setFileDate(new Date(new SimpleDateFormat("MM-dd-yyyy").parse(fileDate).getTime()));
						if (shipmentsRecord.isMapped(HPM1)) 
						{
							if (shipmentsRecord.isSet(HPM1)) {
								String hpm1 = shipmentsRecord
										.get(HPM1);
								//shipmentsToHpDto.setHpm1(hpm1.trim());
							}
						}

						if (shipmentsRecord.isMapped(FAMILY)) {
							if (shipmentsRecord.isSet(FAMILY)) {
								String family = shipmentsRecord
										.get(FAMILY);
								//shipmentsToHpDto.setFamily(family.trim());
							}
						}
						if (shipmentsRecord.isMapped(DATE)) 
						{
							if (shipmentsRecord.isSet(DATE)) {
								String date = shipmentsRecord
										.get(DATE);
								if (!StringUtils.isEmpty(date)) 
								{
									date = date.replaceAll(",", "").trim();
									if (date.matches("^[0-9/]*$*")) 
									{
										shipmentsToHpDto.setDate(REQUIRED_DATE_FORMAT.format(EXISTED_DATE_FORMAT.parse(date)));
										shipmentsToHpDto.setInvoiceDate(new Date(INVOICE_DATE_FORMAT.parse(INVOICE_DATE_FORMAT.format(EXISTED_DATE_FORMAT.parse(date))).getTime()));
									} else 
									{
										shipmentsToHpDto.setDate(date);
									}
								}
							}
						}
						if (shipmentsRecord.isMapped(SKU)) {
							if (shipmentsRecord.isSet(SKU)) {
								shipmentsToHpDto.setSKU(shipmentsRecord
										.get(SKU).trim());
							}
						}
						if (shipmentsRecord.isMapped(PL)) {
							if (shipmentsRecord.isSet(PL)) {
								shipmentsToHpDto.setPLs(shipmentsRecord
										.get(PL).trim());
							}
						}

						if (shipmentsRecord.isMapped(PO))
						{
							if (shipmentsRecord.isSet(PO)) {
								shipmentsToHpDto.setPo(shipmentsRecord
										.get(PO));
							}
						}
						if (shipmentsRecord.isMapped(SHIPPED)) {
							if (shipmentsRecord.isSet(SHIPPED)) {
								String shipped = shipmentsRecord.get(SHIPPED);
								shipmentsToHpDto.setShipped(shipped);
								if(!StringUtils.isEmpty(shipped))
								{
										shipped=shipped.replaceAll(",", "").trim();
										if(shipped.matches("^[0-9]*$*"))
										{
											shipmentsToHpDto.setInvoiceQty(Float.parseFloat(shipped));	
										}
								}
							}
						}

						if (shipmentsRecord.isMapped(NF)) {
							if (shipmentsRecord.isSet(NF)) {
								shipmentsToHpDto.setNFiscal(shipmentsRecord
										.get(NF));
							}
						}

						if (shipmentsRecord.isMapped(PALLET)) {
							if (shipmentsRecord.isSet(PALLET)) {
								String pallet = shipmentsRecord
										.get(PALLET);
								//shipmentsToHpDto.setPallet(pallet);
							}
						}
						if (shipmentsRecord.isMapped(PO_QTY)) {
							if (shipmentsRecord.isSet(PO_QTY)) {
								String poQty = shipmentsRecord
										.get(PO_QTY);
								//shipmentsToHpDto.setQuantity(poQty);
							
							}
						}
						if (shipmentsRecord.isMapped(CUSTOMER)) {
							if (shipmentsRecord.isSet(CUSTOMER)) {
								String customer = shipmentsRecord
										.get(CUSTOMER);
								//shipmentsToHpDto.setCustomer(customer.trim());
							}
						}

						if (shipmentsRecord.isMapped(EMBARQUE)) {
							if (shipmentsRecord.isSet(EMBARQUE)) {
								String embarque = shipmentsRecord
										.get(EMBARQUE);
								//shipmentsToHpDto.setEmbarque(embarque.trim());
							}
						}
						shipmentsList.add(shipmentsToHpDto);
					}
				}
				if (shipmentsList != null && shipmentsList.size() > 0)
				{
					downloadStatus=csvExcelDao.insertFileData(shipmentsList);
					if(downloadStatus)
					{
						dataStatus.setNoOfRecords(shipmentsList.size());
					}
				}
			}
		} catch (NullPointerException nullPointerException)
		{
			LOGGER.error(nullPointerException.getMessage());

		}
		catch (IllegalArgumentException illegalArgumentException)
		{
			LOGGER.error(illegalArgumentException.getMessage());

		}
		catch (Exception exception) 
		{
			LOGGER.error(exception.getMessage());
		} finally {
			if (csvFileParser != null) {
				try {
					csvFileParser.close();
				} catch (IOException e) {
					LOGGER.error(e.getMessage());
				}
			}
		}
		dataStatus.setFolderName(fileSupport.getSubDirectory());
		dataStatus.setFileType("Pc");
		dataStatus.setFileDate(fileDate);
		dataStatus.setFileUploadStatus(downloadStatus);
		dataStatus.setFileName(fileSupport.getFtpFile().getName());
		dataStatus.setFileReceiveDate(fileSupport.getFtpFile().getTimestamp().getTime());
		csvExcelDao.saveFileInfo(dataStatus);
		return downloadStatus;
	}

	public boolean findHeader(Map<String, Integer> headersMap) 
	{
		for (Entry<String, Integer> header : headersMap.entrySet()) 
		{
			if (header.getKey().equalsIgnoreCase(HPM1)) 
			{
				return true;
			}
		}

		return false;
	}

	public String getShipmentFileDate(FTPFile ftpFile) {
		String fileDate = ftpFile.getName().substring(3, 11);
		return fileDate.substring(4, 6) + "-" + fileDate.substring(6, 8) + "-"
				+ fileDate.substring(0, 4);
	}

}
